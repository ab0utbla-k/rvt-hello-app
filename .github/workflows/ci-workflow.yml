---
name: App CI

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:

  push:
    branches:
      - main

    paths:
      - 'cmd/**'
      - 'internal/**'
      - go.mod
      - go.sum
      - Dockerfile

defaults:
  run:
    shell: bash

jobs:
  ci:
    name: Build & Push
    runs-on: ubuntu-latest
    environment: deploy
    outputs:
      image-uri: ${{ steps.build.outputs.image-uri }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN_GH_RUNNER }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get ECR repository name from Parameter Store
        id: get-ecr-repo
        run: |
          REPO=$(aws ssm get-parameter --name "/app/ecr/repository-name" --query "Parameter.Value" --output text)
          echo "repo=$REPO" >> $GITHUB_OUTPUT

      - name: Generate version
        id: version
        run: |
          VERSION="v0.0.0-$(git rev-parse --short HEAD)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

      - name: Check if image exists
        id: check-image
        run: |
          if aws ecr describe-images \
            --repository-name ${{ steps.get-ecr-repo.outputs.repository }} \
            --image-ids imageTag=${{ steps.version.outputs.version }} 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️ Image ${{ steps.version.outputs.version }} already exists, skipping build"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Building new image ${{ steps.version.outputs.version }}"
          fi

      - name: Login to Amazon ECR
        if: steps.check-image.outputs.exists == 'false'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push Docker image to Amazon ECR
        id: build
        if: steps.check-image.outputs.exists == 'false'
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ steps.get-ecr-repo.outputs.repo }}
          IMAGE_TAG: ${{ steps.version.outputs.version }}
        run: |
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          IMAGE_URI="$REGISTRY/$REPOSITORY:$IMAGE_TAG"
          
          docker build \
            --build-arg BUILD_REF=$IMAGE_TAG \
            --build-arg BUILD_DATE=$BUILD_DATE \
            -t $IMAGE_URI \
            .
          
          docker push $IMAGE_URI  
          echo "image-uri=$IMAGE_URI" >> $GITHUB_OUTPUT

  cd:
    name: Deploy
    runs-on: ubuntu-latest
    environment: deploy
    needs: ci
    env:
      IMAGE_URI: ${{ needs.ci.outputs.image-uri }}

    steps:
      - name: Test
        run: |
          echo $IMAGE_URI
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN_GH_RUNNER }}
#          aws-region: ${{ vars.AWS_REGION }}
#
#      - name: Get required params from Parameter Store
#        id: get-params
#        run: |
#          TASK=$(aws ssm get-parameter --name "/app/ecs/task-definition" --query "Parameter.Value" --output text)
#          echo "task=$TASK" >> $GITHUB_OUTPUT
#
#          REPO=$(aws ssm get-parameter --name "/app/ecr/repository-name" --query "Parameter.Value" --output text)
#          echo "repo=$REPO" >> $GITHUB_OUTPUT
#
#      - name: Get DSN Secret ARN from Secrets Manager
#        id: get-dsn
#        run: |
#          SECRET_ARN=$(aws secretsmanager describe-secret \
#            --secret-id "rds/postgres/dsn" \
#            --query ARN \
#            --output text)
#
#          echo "secret_arn=$SECRET_ARN" >> $GITHUB_OUTPUT
#
#      - name: Login to Amazon ECR
#        #if: steps.check-image.outputs.exists == 'false'
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Download task definition
#        run: |
#          aws ecs describe-task-definition \
#            --task-definition ${{ steps.get-params.outputs.task }}  \
#            --query taskDefinition > task-definition.json
#
#      - name: Render Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          container-name: hello-app
#          task-definition: task-definition.json
#          # Automate image later
#          image: ${{ steps.login-ecr.outputs.registry }}/${{ steps.get-params.outputs.repo }}:v0.0.0-1aafa75
#          environment-variables: |
#            ENVIRONMENT=dev
#          secrets:
#            DB_DSN=${{ steps.get-dsn.outputs.secret_arn }}
#
#      - name: Deploy to ECS
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: hello-app-service
#          cluster: hello-app-cluster